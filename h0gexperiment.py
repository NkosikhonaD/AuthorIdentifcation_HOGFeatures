# -*- coding: utf-8 -*-
"""H0GExperiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m6CUPVOCXHhT1HBncRT-76TNvIZA52Af
"""

pip install ml_metrics

# %matplotlib inline
from skimage import feature
from skimage import exposure
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import cosine_distances
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report
from sklearn import svm
import ml_metrics
import os
import seaborn as sns; sns.set()
import numpy as np
from PIL import Image
from google.colab.patches import cv2_imshow
from imutils import paths
import cv2
import argparse
import imutils
#https://github.com/jrosebr1/imutils about imutils
#https://jakevdp.github.io/PythonDataScienceHandbook/05.14-image-features.html
#http://juliaimages.org/ImageFeatures.jl/v0.0.3/tutorials/object_detection.html

from google.colab import drive
drive.mount('/content/drive')

image = Image.open("/content/drive/My Drive/ColabNotebooks/DataProcessed/fourty/train_v/f0080_14/l0080_14_00018.png")
image2 = Image.open("/content/drive/My Drive/ColabNotebooks/DataProcessed/fourty/train_t/f0049_32/c0049_32_00013.png")
H = feature.hog(image,orientations=9,pixels_per_cell=(8,8),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1")
H2 = feature.hog(image2,orientations=9,pixels_per_cell=(8,8),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1")
print(H.reshape(1,-1),H2.reshape(1,-1))

#print(cosine_similarity(H.reshape(-1,1),H3.reshape(-1,1)))

(H,hogImage)= feature.hog(image,orientations=9,pixels_per_cell=(8,8),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1",visualize=True)
hogImage = exposure.rescale_intensity(hogImage,out_range=(0,255))
hogImage = hogImage.astype("uint8")
cv2_imshow(hogImage)

data = []
labels = []
features = []
feature_labels = []

def loadToTraining(image_path_root):
  
  for image_path in paths.list_images(image_path_root):
    label = image_path.split("/")[-2] #label of image ie author name
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    edged = imutils.auto_canny(gray) #detect edges
    #find contours in the edge map keep pnly the lagest one
    cnts = cv2.findContours(edged.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    cnts = cnts[0] if imutils.is_cv2() else cnts[1]
    c= max(cnts,key=cv2.contourArea)
    
    #extract the leter and resize it to canonical wodth and hieght.
    (x,y,h,w) =cv2.boundingRect(c)
    letter = gray[y:y+h,x:x+w]
    letter =cv2.resize(letter,(200,100))
    
    #Extract HOG from letter
    H= feature.hog(letter,orientations=9,pixels_per_cell=(10,10),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1")
    data.append(H)
    labels.append(label)

def load_image_label(letter_image_path):
  list_authors = os.listdir(letter_image_path)
  for author in list_authors:
    author_path = letter_image_path+os.sep+author
    for image_path in paths.list_images(author_path):
      label = author
      image = cv2.imread(image_path)
      gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
      edged = imutils.auto_canny(gray) #detect edges
      #find contours in the edge map keep pnly the lagest one
      cnts = cv2.findContours(edged.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
      cnts = cnts[0] if imutils.is_cv2() else cnts[1]
      c= max(cnts,key=cv2.contourArea)
    
      #extract the leter and resize it to canonical wodth and hieght.
      (x,y,h,w) =cv2.boundingRect(c)
      letter = gray[y:y+h,x:x+w]
      letter =cv2.resize(letter,(200,100))
    
      #Extract HOG from letter
      H= feature.hog(letter,orientations=9,pixels_per_cell=(10,10),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1")
      features.append(H)
      feature_labels.append(label)

load_image_label("/content/drive/My Drive/ColabNotebooks/DataProcessed/fourty/train_a")

def train_test(image_test_root):
  print("[INFO] Training classifier ...")
  model = KNeighborsClassifier(n_neighbors=1)
  model.fit(data,labels)
  print("[INFO] Traing complete .....")
  print("[INFO] Testing classifier ....")
  
  for(i,image_path) in enumerate(paths.list_images(image_test_root)):
    #load the test image, and resize to cannonical size
    label2 = image_path.split("/")[-2] 
    image=cv2.imread(image_path)
    gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)
    letter =cv2.resize(gray,(200,100))
    (H,hogImage)= feature.hog(letter,orientations=9,pixels_per_cell=(10,10),cells_per_block=(2,2),transform_sqrt=True,block_norm="L1",visualize=True)
    
    #print(cosine_distances(H.reshape(1,-1),data))
    #print("------------------------------------------- \n")
    
  
    pred = model.predict(H.reshape(1,-1))[0]
    pro = model.predict_proba(H.reshape(1,-1))
    ac =model.score(H.reshape(1,-1),label2)
    print(ac)
    print(pro)
    
    #visualize
    hogImage = exposure.rescale_intensity(hogImage,out_range=(0,255))
    hogImage=hogImage.astype("uint8")
    cv2_imshow(hogImage)
    
    cv2.putText(image,pred.title(),(10,35),cv2.FONT_HERSHEY_SIMPLEX, 1.0,(0,255,0),3)
    cv2_imshow(image)
    cv2.waitKey(0)



def train_test_partition(feature_list,labels_list):
  
  x = feature_list
  y = labels_list
  X_train, X_test,y_train,y_test = train_test_split(x,y,test_size=0.10)
  
  knn_cv = KNeighborsClassifier(n_neighbors=1)
  #svm_cf = svm.SVC(gamma=0.001)
  #cv_scores = cross_val_score(knn_cv, x,y, cv=2)
  #print(cv_scores)
  knn_cv.fit(X_train,y_train)
  expected = y_test
  predicted = knn_cv.predict(X_test)
  print(ml_metrics.mapk(expected,predicted,4))
  #print(classification_report(expected,predicted))
  #print(metric)
  #sc = knn_cv.score(X_test,y_test)
  #print(sc)
  #print(X_test)
  #print("=======================")
  #print(y_test)
  
  #svm_cf.fit(X_train,Y)
  #cv_score_svm = cross_val_score(svm_cf,x,y,cv=2)
  #print(cv_score_svm)

train_test_partition(features,feature_labels)

